# -*- coding: utf-8 -*-
"""Kopia av Supermarket_sales_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nuFHg-Pw5_uNBVcDLB48Kv3O_mQtPDaK
"""

# Importing Libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Reading CSV File


from google.colab import files

uploaded = files.upload()

# Importing csv file

import io

df = pd.read_csv(io.BytesIO(uploaded['SupermartGrocerySales.csv']))
print(df)

df.sample(3)

# Statistical summary of the dataset

df.describe()

# Dropping some of columns

df.drop(["Order ID"], axis=1, inplace=True)

# Info of the DataFrame

df.info() # There are no missing values

# Sample Data from Order Date Column

df["Order Date"].sample(10) # Order Date has different (mixed) formats

# Converting Order Date Column to Pandas DateTime Format
# by using (format="mixed")

df["Order Date"] = pd.to_datetime(df["Order Date"], format="mixed")

# Sample Data from Order Date Column after transformation

df["Order Date"].sample(10)

# Extracting Year from Order Date Column

df["Year"] = df["Order Date"].dt.year

# Extracting Month from Order Date Column

df["Month"] = df["Order Date"].dt.month_name()

# Extracting Date from Order Date Column

df["Date"] = df["Order Date"].dt.day

# Creating a column with a weekday

# df["Weekday"] = pd.to_datetime(df[["Year", "Month", "Date"]]).dt.day_name()

df["Weekday"] = df["Order Date"].dt.day_name()

# Dropping "Order Date" column

df.drop(["Order Date"], axis=1, inplace=True)

# Final DataFrame

df.head(3)

# Unique values in Category Column

df["Category"].unique()

# Unique values in Sub Category Column

df["Sub Category"].unique()

# Categories and their associated Sub Categories

subcategories_by_category = df.groupby('Category')['Sub Category'].unique()

for category, subcategories in subcategories_by_category.items():
    print(f"{category}: {list(subcategories)}")
    print()

# Amount of products sold in each Category

#count = df["Category"].value_counts()
#print(count)

df["Category"].value_counts()

# Creating a diagram for Category

category_counts = df["Category"].value_counts()

colors = sns.color_palette("husl", len(category_counts))

plt.figure(figsize=(8, 6))
category_counts.plot(kind='bar', color=colors)

plt.title('Count of Products in Each Category', fontsize=16)
plt.xlabel('Category', fontsize=12)
plt.ylabel('Count', fontsize=12)

plt.show()

# Amount of products sold in each Sub Category

#count = df["Sub Category"].value_counts()
#print(count)

df["Sub Category"].value_counts()

# Creating a diagram for Sub Category

category_counts = df["Sub Category"].value_counts()
colors = sns.color_palette("husl", len(category_counts))


plt.figure(figsize=(8, 6))
category_counts.plot(kind='bar', color=colors)

plt.title('Count of Products in Each Category', fontsize=16)
plt.xlabel('Category', fontsize=12)
plt.ylabel('Count', fontsize=12)

plt.show()

# Count of products sold each Year

df["Year"].value_counts().sort_index()

# Creating a diagram for products sold each Year

category_counts = df["Year"].value_counts()
category_counts = category_counts.sort_index()

plt.figure(figsize=(8, 6))
category_counts.plot(kind='bar', color=colors)

plt.title('Count of Products in Each Category', fontsize=16)
plt.xlabel('Category', fontsize=12)
plt.ylabel('Count', fontsize=12)

plt.show()

# Count of products sold each Month

# Creating first a list with Month of the year in correct order
month_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',
               'September', 'October', 'November', 'December']

sales_count_by_month = df['Month'].value_counts().reindex(month_order, fill_value=0)

print(sales_count_by_month)

# Creating a diagram for products sold each Month (in correct order)

plt.figure(figsize=(10, 6))
sales_count_by_month.plot(kind='bar', color=colors)

plt.title('Count of Products Sold Each Month', fontsize=16)
plt.xlabel('Month', fontsize=12)
plt.ylabel('Count', fontsize=12)

plt.xticks(rotation=45)
plt.show()

# Count of products sold each day in a week
category_counts = df["Weekday"].value_counts()

# Creating a list with weekdays in correct order
weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

# Reordering the counts to match the correct weekday order
category_counts = category_counts.reindex(weekday_order, fill_value=0)

print(category_counts)

# Creating a diagram for products sold each day of the week (in correct order)

plt.figure(figsize=(10, 6))
category_counts.plot(kind='bar', color='skyblue')

plt.title('Count of Products Sold Each Weekday', fontsize=16)
plt.xlabel('Weekday', fontsize=12)
plt.ylabel('Count', fontsize=12)

plt.xticks(rotation=45)
plt.show()

# Arranging products sold each Date by Date and counting them

date_counts = df["Date"].value_counts().sort_index()

print(date_counts)

# Creating a diagram for products sold each day of 12-month period (in correct order)

plt.figure(figsize=(10, 6))
date_counts.plot(kind='bar', color='skyblue')

plt.title('Counts of Each Date', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Count', fontsize=12)

plt.xticks(rotation=45)
plt.show()

# Total sale in each Category

df.groupby(["Category"])["Sales"].sum().sort_values(ascending=False)

# Creating a diagram for Total sale in each Category

sales_by_category = df.groupby("Category")["Sales"].sum().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
sales_by_category.plot(kind='bar', color='skyblue')

plt.title('Total Sales by Category', fontsize=16)
plt.xlabel('Category', fontsize=12)
plt.ylabel('Total Sales', fontsize=12)

plt.xticks(rotation=45)
plt.show()

# Total sale in each Sub Category

df.groupby(["Sub Category"])["Sales"].sum().sort_values(ascending=False)

# Creating a diagram for Total sale in each Sub Category

sales_by_sub_category = df.groupby("Sub Category")["Sales"].sum().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
sales_by_sub_category.plot(kind='bar', color='skyblue')

plt.title('Total Sales by Sub Category', fontsize=16)
plt.xlabel('Sub Category', fontsize=12)
plt.ylabel('Total Sales', fontsize=12)

plt.xticks(rotation=45)
plt.show()

# Total sale in each Month on correct month-order

sales_by_month = df.groupby("Month")["Sales"].sum()

sales_by_month = sales_by_month.reindex(month_order)

print(sales_by_month)

# Creating a diagram for Total sale for each month

plt.figure(figsize=(10, 6))
sales_by_month.plot(kind='bar', color='skyblue')

plt.title('Total Sales by Month', fontsize=16)
plt.xlabel('Month', fontsize=12)
plt.ylabel('Total Sales', fontsize=12)

plt.xticks(rotation=45)

plt.show()

# Total sale in each Year

sales_by_year = df.groupby("Year")["Sales"].sum()

sales_by_year = sales_by_year.sort_index()

print(sales_by_year)

# Creating a diagram for Total sale in each year

plt.figure(figsize=(10, 6))
sales_by_year.plot(kind='bar', color='skyblue')

plt.title('Total Sales by Year', fontsize=16)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Total Sales', fontsize=12)

plt.xticks(rotation=45)

plt.show()

# Profit by Category

profit_by_category = df.groupby(["Category"])["Profit"].sum().sort_values(ascending=False)

print(profit_by_category)

# Creating a diagram for Profit by Category

plt.figure(figsize=(10, 6))
profit_by_category.plot(kind='bar', color='skyblue')

plt.title('Profit_by_Category', fontsize=16)
plt.xlabel('Category', fontsize=12)
plt.ylabel('Profit', fontsize=12)

plt.xticks(rotation=45)

plt.show()

# Profit per Year

profit_per_year = df.groupby('Year')['Profit'].sum()
print("Profit per Year:\n", profit_per_year)

# Creating a diagram for Profit per Year

plt.figure(figsize=(10, 6))
profit_per_year.plot(kind='bar', color='skyblue')

plt.title('Profit_per_Year', fontsize=16)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Profit', fontsize=12)

plt.xticks(rotation=45)

plt.show()

# Profit per Year and Month

profit_per_month_year = df.groupby(['Year', 'Month'])['Profit'].sum()
profit_per_month_year = profit_per_month.unstack().reindex(columns=month_order).stack()
print("\nProfit per Month:\n", profit_per_month)

# Creating a diagram for Profit per Year and Month


profit_per_month_year = df.groupby(['Year', 'Month'])['Profit'].sum().reset_index()

profit_per_month_year_pivot = profit_per_month_year.pivot(index='Year', columns='Month', values='Profit').reindex(columns=month_order, fill_value=0)

plt.figure(figsize=(12, 6))
sns.heatmap(profit_per_month_year_pivot, annot=True, fmt=".0f", cmap="YlGnBu", linewidths=.5)

plt.title('Profit per Year and Month', fontsize=16)
plt.xlabel('Month', fontsize=12)
plt.ylabel('Year', fontsize=12)

plt.show()

# Profit per day (for all four years)

profit_per_day = df.groupby(['Date'])['Profit'].sum()
pd.set_option('display.max_rows', None)
print("\nProfit per Day:\n", profit_per_day)
pd.reset_option('display.max_rows')

# Creating a diagram for Profit per day (for all four years)

plt.figure(figsize=(10, 6))
profit_per_day.plot(kind='bar', color='skyblue')

plt.title('Profit_per_Day', fontsize=16)
plt.xlabel('Day', fontsize=12)
plt.ylabel('Profit', fontsize=12)

plt.xticks(rotation=45)

plt.show()



# Correlation between Sales och Profit
correlation = df['Sales'].corr(df['Profit'])

print(f"Correlation between Sales och Profit: {correlation}")

plt.figure(figsize=(8, 6))
sns.scatterplot(x='Sales', y='Profit', data=df)

plt.title(f'Sales vs Profit (Correlation: {correlation:.2f})', fontsize=16)
plt.xlabel('Sales', fontsize=12)
plt.ylabel('Profit', fontsize=12)

plt.show()

# Correlation between Discount och Profit

correlation = df['Discount'].corr(df['Profit'])

print(f"Correlation between Discount och Profit: {correlation}")

plt.figure(figsize=(8, 6))
sns.scatterplot(x='Discount', y='Profit', data=df)

plt.title(f'Discount vs Profit (Korrelation: {correlation:.2f})', fontsize=16)
plt.xlabel('Discount', fontsize=12)
plt.ylabel('Profit', fontsize=12)

plt.show()



# Quantity of sold items per Region

sales_count_by_region = df.groupby('Region').size()

print("Quantity of made sales:\n", sales_count_by_region)

# Quantity of sales by Region and Category

sales_count_by_region_category = df.groupby(['Region', 'Category']).size()

print("Quantity of sales by Region and Category:\n", sales_count_by_region_category)

# Visualisation of Quantity of sales by Region and Category

sales_count_by_region_category = df.groupby(['Region', 'Category']).size().unstack(fill_value=0)

ax = sales_count_by_region_category.plot(kind='bar', stacked=True, figsize=(12, 8))

for container in ax.containers:
    ax.bar_label(container, label_type='center')

plt.title('Quantity of Sales by Region and Category', fontsize=16)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Quantity of Sales', fontsize=12)
plt.legend(title="Category", bbox_to_anchor=(1.05, 1), loc='upper left')

plt.xticks(rotation=0)
plt.show()

# Quantity of sales by Region and Sub Category

sales_count_by_region_sub_category = df.groupby(['Region', 'Sub Category']).size()
pd.set_option('display.max_rows', None)

print("Quantity of sales by Region and Sub Category:\n", sales_count_by_region_sub_category)

# Visualisation of Quantity of sales by Region and Sub Category

sales_count_by_region_sub_category = df.groupby(['Region', 'Sub Category']).size().unstack(fill_value=0)

ax = sales_count_by_region_sub_category.plot(kind='bar', stacked=True, figsize=(12, 8))

for container in ax.containers:
    ax.bar_label(container, label_type='center')

plt.title('Quantity of Sales by Region and Sub Category', fontsize=16)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Quantity of Sales', fontsize=12)
plt.legend(title="Sub Category", bbox_to_anchor=(1.05, 1), loc='upper left')

plt.xticks(rotation=0)
plt.show()

# Profit per Region

profit_per_region = df.groupby('Region')['Profit'].sum()

print("Profit per Region:\n", profit_per_region)

# Visualisation of Profit per Region

plt.figure(figsize=(8, 6))
profit_per_region.plot(kind='bar', color='skyblue')

# Lägg till titlar och etiketter
plt.title('Total Profit per Region', fontsize=16)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Total Profit', fontsize=12)

# Visa diagrammet
plt.xticks(rotation=0)
plt.show()

# Profit per Region and Category
profit_per_region_category = df.groupby(['Region', 'Category'])['Profit'].sum()

print("Profit per Region och Category:\n", profit_per_region_category)

# Visualisation of Profit per Region and Category
profit_per_region_category_pivot = profit_per_region_category.unstack()

profit_per_region_category_pivot.plot(kind='bar', figsize=(10, 6), color=['#4CAF50', '#2196F3', '#FFC107'])

plt.title('Profit per Region och Category', fontsize=16)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Total Profit', fontsize=12)
plt.legend(title="Category", bbox_to_anchor=(1.05, 1), loc='upper left')

plt.xticks(rotation=0)
plt.show()



